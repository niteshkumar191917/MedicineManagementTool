@using MedicineManagementTool.UI.IService;
@inject IMedicineService MedicineService
@inject IJSRuntime JsRuntime


@if (medicine == null)
{
    <p>empty......</p>
}
else
{
    <input type="text" @bind-Value="@search" @bind-Value:event="oninput" @onkeyup="()=>SearchAsync()" class="form-control w-50 ms-auto mt-3"></input>

    <div class="m-2 p-2">
        <table class="table">
            <thead>
                <tr>
                    <th class="sort-th" @onclick="@(() => SortTable("Code"))">Code<span class="fa @(SetSortIcon("Code"))"></span></th>
                    <th class="sort-th" @onclick="@(() => SortTable("Name"))">Medicine Name Id<span class="fa @(SetSortIcon("Name"))"></span></th>
                    <th class="sort-th" @onclick="@(() => SortTable("Price"))">Price<span class="fa @(SetSortIcon("Price"))"></span></th>
                    <th class="sort-th" @onclick="@(() => SortTable("Quantity"))">Quantity<span class="fa @(SetSortIcon("Quantity"))"></span></th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (medicine.Any())
                {
                    @foreach (var medicineDetail in medicine)
                    {
                        <tr>
                            <td>@medicineDetail.Code</td>
                            <td>@medicineDetail.Name</td>
                            <td>@medicineDetail.Price</td>
                            <td>@medicineDetail.Quantity</td>
                            <td>
                                <MedicineStatus quantity="medicineDetail.Quantity"></MedicineStatus>

                            </td>
                            <td>
                                @if (@isAdmin)
                                {
                                    <NavLink href="@($"medicine/edit/{medicineDetail.Id}")" class="btn btn-outline-success"><i class="fas fa-edit"></i></NavLink>
                                    <button class="btn btn-outline-danger" @onclick="() => Modal.Open(medicineDetail.Id)"><i class="fas fa-trash"></i></button>
                                    <NavLink href="@($"viewMedicine/{medicineDetail.Id}/true")" class="btn btn-outline-secondary"><i class="fas fa-eye"></i></NavLink>
                                }
                                else
                                {
                                    @if (medicineDetail.Quantity == 0)
                                    {
                                        <button disabled class="btn btn-outline-secondary "><i class="fa fa-shopping-cart"></i></button>
                                    }
                                    else
                                    {
                                        <NavLink href="@($"sellMedicine/{medicineDetail.Name}")" class="btn btn-outline-secondary"><i class="fa fa-shopping-cart"></i></NavLink>
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    @if (medicine.Count != 0)
    {
        <div class="table-responsive">
            <Pagination CurrentPage="currentPage" Radius="1" TotalPageQuantity="totalPageQuantity"
                SelectedPage="SelectedPage"></Pagination>
        </div>
    }
}
<DeleteConfirmation @ref="Modal" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {
    public DeleteConfirmation? Modal { get; set; }
    [Parameter]
    public bool isAdmin { get; set; }

    public List<MedicineDTO> medicine;

    ResponseDTO<MedicineDTO> responseDto = new();

    string search = string.Empty;
    string statusMessage = string.Empty;
    private int currentPage = 1;
    private int totalPageQuantity;
    private int quantityPerPage = 5;
    int sortCount = 1;
    private bool isSortedAscending = true;
    private string activeSortColumn = "Id";

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(search))
        {
            await SearchAsync();
        }
        else
        {
            await GetUserAsync();
        }
    }
    private async Task SelectedPage(int page)
    {
        currentPage = page;
        if (!string.IsNullOrEmpty(search))
        {
            await SearchAsync(page);
        }
        else
        {
            await GetUserAsync(page);
        }
    }

    async Task GetUserAsync(int page = 1)
    {

        responseDto = await MedicineService.GetAllMedicine(sortCount, activeSortColumn, currentPage, quantityPerPage);
        if (responseDto.StatusCode == 1)
        {
            statusMessage = string.Empty;
            medicine = responseDto.ListGeneric;
            totalPageQuantity = (int)Math.Ceiling(responseDto.Count / (double)quantityPerPage);
            StateHasChanged();
        }
        else
        {
            medicine = null;
        }
        StateHasChanged();
    }
    async Task SearchAsync(int page = 1)
    {
        if (!string.IsNullOrEmpty(search))
        {
            currentPage = page;
            responseDto = await MedicineService.SearchAsync(search, page, quantityPerPage);
            if (responseDto.StatusCode == 1)
            {
                statusMessage = string.Empty;
                medicine = responseDto.ListGeneric;
                totalPageQuantity = (int)Math.Ceiling(responseDto.Count / (double)quantityPerPage);
                StateHasChanged();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "Search", "This is not Exist!");
            }
        }
        else
        {
            await GetUserAsync();
        }
    }

    async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            sortCount = 1;
            activeSortColumn = columnName;
            await GetUserAsync(1);
            isSortedAscending = true;
        }
        else
        {
            if (isSortedAscending)
            {
                sortCount = 2;
            }
            else
            {
                sortCount = 1;
            }
            isSortedAscending = !isSortedAscending;
            await GetUserAsync(currentPage);
        }
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-down";
        }
        else
        {
            return "fa-sort-up";
        }
    }
    async Task ConfirmDelete_Click()
    {
        await OnInitializedAsync();
    }
}
